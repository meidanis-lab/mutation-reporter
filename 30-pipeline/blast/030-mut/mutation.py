#!/usr/bin/env python


''' Program to find mutations

    Developed at the Boldrini Center, Brazil, in 2023.
'''

############################################################
### imports

import sys
import argparse
import collections
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO
from Bio.Blast import NCBIXML

############################################################
### constants

MSGS = False


############################################################
### routines

############################################################
### routine that parses blast XML output
###
### xml: file generated by BLAST

def parser(min_align_len, min_perc_ident, min_depth, min_vaf, xml, msgs):
    parse = NCBIXML.parse(open(xml))
    count_hits = 0
    count_good = 0
    start = []
    end = []
    mut = []
    VAF = {}
    mutations = {}


    for record in parse:
        count_hits += 1
        if record.alignments:
            count_align = 0
            for align in record.alignments:
                count_align += 1
                if count_align > 1:
                    if msgs:
                        print('More than one hit for ' + record.query.split(' ')[1])
                    break
                count_hsp = 0
                for hsp in align.hsps:
                    count_hsp += 1
                    if count_hsp > 1:
                        if msgs:
                            print('More than one hsp for ' + record.query)
                    percent_ident = 100 * hsp.identities / hsp.align_length

                    if msgs:
                       print(record.query_id)
                       print(record.query)
                       print(hsp.query)
                       print(hsp.match)
                       print(hsp.sbjct)
                       print(hsp.expect)
                       print(percent_ident)

                    
                    if hsp.align_length >= int(min_align_len):
                        if percent_ident > int(min_perc_ident):
            
                            count_good += 1

                            start.append(hsp.sbjct_start)
                            end.append(hsp.sbjct_end)

                            class Mutation:
                                
                                def __init__(self, gene, sbjct_pos, pos, query_pos, count):
                                    self.gene = gene
                                    self.sbjct_pos = sbjct_pos
                                    self.pos = pos
                                    self.query_pos = query_pos
                                    self.count = count

 
                            posb = -1
                            while True:
                                posb = hsp.match.find(' ', posb+1)
                                if posb<0:
                                    break
                                
                                protmut = hsp.sbjct[posb] + str(posb + hsp.sbjct_start) + hsp.query[posb]

                                if protmut in mutations:
                                    mutations[protmut].count += 1
                                    
                                else:
                                    mutations[protmut] = Mutation(
                                        align.hit_id,
                                        hsp.sbjct[posb],
                                        str(posb + hsp.sbjct_start),
                                        hsp.query[posb],
                                        1)
                                    
                                
                            posm = -1
                            while True:
                                posm = hsp.match.find('+', posm+1)
                                if posm<0:
                                    break
                                
                                protmut = hsp.sbjct[posm] + str(posm + hsp.sbjct_start) + hsp.query[posm]
                                
                                if protmut in mutations:
                                    mutations[protmut].count += 1
                                    
                                else:
                                    mutations[protmut] = Mutation(
                                        align.hit_id,
                                        hsp.sbjct[posm],
                                        str(posm + hsp.sbjct_start),
                                        hsp.query[posm],
                                        1)

        
                                
    count_start = collections.Counter(start)
    count_end = collections.Counter(end)

    dict_start = dict(sorted(count_start.items()))
    dict_end = dict(sorted(count_end.items()))


    acc = 0
    pos_start = [0]
    value_start = [0]
    for key, value in dict_start.items():
        acc += value
        pos_start.append(key)
        value_start.append(acc)

        
    acc = 0
    pos_end = [0]
    value_end = [0]
    for key, value in dict_end.items():
        acc += value
        pos_end.append(key)
        value_end.append(acc)
        
    def depth_index(vector, first, last, item):
        if last >= first:
            middle = (first + last) // 2
            if vector[middle] <= item:
                return depth_index(vector, middle + 1, last, item)
            else:
                return depth_index(vector, first, middle - 1, item)
        else:
            return last

    print('Gene', '\t', 'Prot Mut', '\t', 'Mut Reads', '\t', 'WT Reads', '\t', 'VAF')

    for m in mutations:
        start_depth = value_start[(depth_index(pos_start, 0, len(pos_start) - 1, int(m[1:-1])))]
        end_depth = value_end[(depth_index(pos_end, 0, len(pos_end) - 1, int(m[1:-1])))]
        depth = start_depth - end_depth
        if depth > int(min_depth):
            VAF[m] = 100 * mutations[m].count / depth
            if VAF[m] > int(min_vaf):
                print(mutations[m].gene, '\t', m, '\t', mutations[m].count,'\t', depth - mutations[m].count, '\t', round(VAF[m], 2), '%')

    
    return(count_hits, count_good)


def main(MSGS):
    MIN_ALIGN_LEN = sys.argv[1]
    MIN_PERC_IDENT = sys.argv[2]
    MIN_DEPTH = sys.argv[3]
    MIN_VAF = sys.argv[4]
    XML = sys.argv[5]
    if len(sys.argv) >= 7:
        MSGS = True
    
    c_h, c_g = parser(MIN_ALIGN_LEN, MIN_PERC_IDENT, MIN_DEPTH, MIN_VAF, XML, MSGS)

if __name__ == "__main__":
    main(MSGS)

